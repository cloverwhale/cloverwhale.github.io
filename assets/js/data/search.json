[ { "title": "Homework: Custom Automation", "url": "/posts/python-homework-day97/", "categories": "Notes", "tags": "python, pandas, jupyter notebook", "date": "2023-04-30 04:47:00 +0000", "snippet": "100 Days of Code的作業: Custom Automation 的紀錄.Pandas drop multiple columns 使用下面的方法在column names有重複的時候會無法正確運作, 必須重新命名.cols = [2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17]df.drop(df.columns[cols], axis=1, inplace=True)在Jupyter Notebook中並排顯示表格 Table Visualization — pandas 2.0.1 documentation df_foreign.style為&lt;class 'pandas.io.formats.style.Styler'&gt; .set_table_attributes(\"style='display:inline'\")設定table styledf_top_styler = df_foreign.head(20).style \\ .hide(axis='index') \\ .set_table_attributes(\"style='display:inline'\") \\ .set_caption('買超排行')df_bottom_styler = df_foreign.tail(20).sort_values(by='外陸資買賣超股數(不含外資自營商)').style \\ .hide(axis='index') \\ .set_table_attributes(\"style='display:inline'\") \\ .set_caption('賣超排行') 輸出html後利用IPythond的display_html顯示from IPython.display import display_htmldisplay_html(df_top_styler._repr_html_() + df_bottom_styler._repr_html_(), raw=True)在Jupyter Notebook markdown中顯示變數 寫在code block中, 執行時會產生markdownfrom IPython.display import Markdown as md#...md(\"# {} 三大法人買賣超排行\".format(date_string_f))其他參考頁面 Jupyter notebook display two pandas tables side by side Print Variable In Jupyter Notebook Markdown Cell Python" }, { "title": "Homework: Custom Web Scrapper", "url": "/posts/python-homework-day92/", "categories": "Notes", "tags": "python, beautifulsoup, argparse, webscrapping", "date": "2022-12-12 14:57:00 +0000", "snippet": "紀錄100 Days of Code的作業: Custom Web Scrapper時遇到的一些問題和用到的methods.BeautifulSoupImport and Create ObjectCreate BeautifulSoup objectfrom bs4 import BeautifulSoup as bssoup = bs(search_result.text, \"html.parser\") 其他的parser資訊Get tags find_all(): 回傳相符的tag的list, 下面的例子放tag name, 和css class, 所以是要找所有符合的&lt;a class=\"mntl-card-list-items\"...&gt;; 若要只回傳相符的tag則使用find()soup.find_all(\"a\", class_=\"mntl-card-list-items\") select(): 使用css selectorsoup.select(\"p#article-subheading_2-0\")Get attribute value from a tag例如要拿&lt;a&gt;裡面的urllink = soup.find(\"a\")link.get(\"href\")Remove tags Tag.decompose(): 移除原來物件中的某個tagbutton = soup.select(\"button\")button.decompose() PageElement.extrac(): 移除tree中的tag或String, 並回傳移除的值soup.a.extract() # remove tag &lt;a&gt;ArgparseArgparse TutorialImport and Create Objectimport argparseparser = argparse.ArgumentParser(description=\"Search recipes by given a keyword\")設定可用的參數parser.add_argument(\"-s\", \"--search\", type=str, help=\"search key word\", default=DEFAULT_SEARCH_KEYWORD)parser.add_argument(\"-n\", \"--number\", type=int, help=\"number of recipes to save\", default=DATA_COUNT) type, 指定data type, 若輸入不符合的類型會報錯 help, 使用-h, -help時會出現的說明文字 default, 沒有輸入時的預設值Get arugment valuesargs = parser.parse_args() # Get all argument valuessearch_phrase=args.search # get -s/-search valuenumber=args.number 拿argument value時是指定search而不是s 作業中我只使用optional arguments, 如果是postional argument: parser.add_argument(\"square\", help=\"help text\", type=int)Etc 每次網站改版就要重寫一遍? (作業已經重寫一次T_T) 如何快速的完成改版?" }, { "title": "Homework: Determinants of Earnings", "url": "/posts/pandas-notes-3/", "categories": "", "tags": "python, pandas, jupyter notebook, pyplot, seaborn, sklearn", "date": "2022-10-08 12:45:00 +0000", "snippet": "紀錄100 Days of Code的作業: Determinats of Earnings時遇到的一些問題和用到的methods.matplotlib.pyplotimport matplotlib.pyplot as pltscatter plotmatplotlib.pyplot.scatter — Matplotlib 3.5.1 documentationplt.scatter(x=y_train, y=predict_values_s, alpha=0.3)plt.plot(y_train, y_train, color='C1')plt.title(f'Actual vs Predicted Earnings: $y _i$ vs $\\hat y_i$ (R-Squared {rsquared_s:.2})', fontsize=17)plt.xlabel('Actual Earnings $y _i$', fontsize=14)plt.ylabel('Prediced Earnings $\\hat y _i$', fontsize=14)plt.show() color: 定義圖的顏色 alpha: 點的透明度 plt.plot in ln2: 疊上另一線圖display mathmetical expressionsWriting mathematical expressions — Matplotlib 3.6.0 documentationSeabornimport seaborn as snshistplotseaborn.displot — seaborn 0.12.0 documentationy_log = np.log(df_clean['EARNINGS'])sns.displot(y_log, kde=True, color='C7')plt.title(f'Log Earnings. Skew is {y_log.skew():.3}')plt.show() kde=True: Add KDE curvepairplotseaborn.pairplot — seaborn 0.12.0 documentationsns.pairplot(df_clean, x_vars=[\"ASVABAR\", \"ASVABWK\", \"ASVABPC\"], y_vars=[\"EARNINGS\"], height=4, aspect=.8, kind=\"reg\", plot_kws={'line_kws': {'color': 'C3'}, 'scatter_kws': {'alpha': 0.3}}) 其實可以畫出多對多的關係圖, 但我只想並排每個變數對上earnings, 所以y_vars只有一個. plot_kws: 設定圖表的參數. 我目前只用到改顏色SKlearn - LinearRegressionsklearn.linear_model.LinearRegression — scikit-learn 1.1.2 documentationImports:sklearn.linear_model import LinearRegressionsklearn.model_selection import train_test_splitSplit dataFit data前需要先split data. 使用一部分的data做training, 另一部分做testing.X_train, X_test, y_train, y_test = train_test_split(df_clean, df_clean['EARNINGS'], test_size=0.2, random_state=10) 前兩個args為data and target data. (我好像應該要把’EARNINGS’從第一個dataframe中拿掉?) test_size: 設定test data的比例0.0~1.0, default為0.25 random_state: See Glossary of Common Terms and API Elements — scikit-learn 1.1.2 documentation.fit Fit linear model.reg_s = LinearRegression()reg_s.fit(X_train_S, y_train) fit(X_train_S, y_train): X_train_S為training data, y_train為target values 需要注意len(X_train_S)和len(y_train)需要相符 Data如果不是2d array, 則需要reshape, for example: X_train_S = np.array(X_train['S']).reshape(-1,1)attributes: intercept_ and coef_Linear model的長相: ŷ(ω,x) = ω0 + ω1x2 + … + ωpxp intercept_: ω0 coef_: ω = (ω1, …, ωp).score (R-Squared value) Return the coefficient of determination of the prediction. The best possible score is 1.0 and it could be negative.rsquared_s = reg_s.score(X_test_S, y_test).predict用fit好的linear model預測數值predict_values_s = reg_s.predict(X_train_S)接著求residuals. 用來分析linear model是否有bias.residuals_s = (y_train - predict_values_s)畫出residuals和predicted values的scatter plot. 越接近normal distribution越好.(可用distplot, skew and mean分析)plt.scatter(x=predict_values_s, y=residuals_s, c='C2', alpha=0.3)plt.title('Residuals vs Fitted Values for Years of Schooling', fontsize=17)plt.xlabel('Predicted Earnings $\\hat y _i$', fontsize=14)plt.ylabel('Residuals', fontsize=14)plt.show()" }, { "title": "Homework: Deaths Involving Police in US Analysis", "url": "/posts/pandas-notes-2/", "categories": "Notes", "tags": "python, pandas, jupyter notebook, plotly, seaborn", "date": "2022-10-04 12:44:00 +0000", "snippet": "紀錄100 Days of Code的作業: 美國警察造成死亡的案件分析時遇到的一些問題和用到的methods..apply 和 .astype置換非數字的字串, 再轉numeric typedf_pct_poverty['poverty_rate'] = df_pct_poverty['poverty_rate'] .apply(lambda x: str(x).replace('-', '0')) .astype('float64') pandas.DataFrame.apply pandas.DataFrame.astype.resample用日期重新取樣, 使用的column須為日期的typedf_fatalities_time = df_fatalities.resample('M', on='date').count() pandas.DataFrame.resamplePlotlysubplots需要import graph_objects和subplots:import plotly.graph_objects as gofrom plotly.subplots import make_subplots繪圖:# 設定subplots的columns and rowsfig = make_subplots(rows=2, cols=1, subplot_titles=( 'Fatalities of Race Percentage of Top 10 cities', 'Racial Makeup of Top 10 cities'))# 設定圖例的顏色colors = {'Asian': px.colors.qualitative.Vivid[0], 'Black': px.colors.qualitative.Vivid[1], 'Hispanic': px.colors.qualitative.Vivid[2], 'Native American': px.colors.qualitative.Vivid[3], 'White': px.colors.qualitative.Vivid[4], 'Others': px.colors.qualitative.Vivid[5]}race_columns = ['Asian', 'Black', 'Hispanic', 'Native American', 'Others', 'White']# 把每個race的資料疊上去for c in race_columns: fig.add_trace( go.Bar(x=df_fatalities_top_10_pivot['City'], y=df_fatalities_top_10_pivot[c], name=c, marker_color=colors[c]), row=1, col=1 )# 這邊拿掉Others是因為下面的dataFrame沒有這個欄位race_columns.remove('Others')for c in race_columns: fig.add_trace( go.Bar(x=df_share_race_top_10_city['City'], y=df_share_race_top_10_city[c], name=c, marker_color=colors[c], showlegend=False), row=2, col=1 )# 設定bar的樣式, 圖表大小和標題fig.update_layout(barmode='stack')fig.update_layout(height=800, width=800, title_text=\"Death by Race\")fig.show()畫出來的樣子:choropleth locationmode: 設定地圖組成的樣式, 美國使用’USA-states’, default是’ISO-3’ scope, 設定地圖範圍fig = px.choropleth(df_fatalities_state, locations='state', color='killings', hover_name='state', locationmode=\"USA-states\", scope=\"usa\", color_continuous_scale=px.colors.sequential.Cividis_r, title='Number of Police Kilings by US State' )Seabornmport matplotlib.pyplot as pltimport seaborn as sns 使用plt更改圖表設定, 像是標題, x軸y軸的label.joinplot seaborn.jointplot Draw a plot of two variables with bivariate and univariate graphs. attribute ‘kind’可設定圖表的類型, 例: ‘kde’, ‘reg’, ‘hist’sns.jointplot(data=df_poverty_vs_hs, x=\"percent_completed_hs\", y=\"poverty_rate\", marginal_kws=dict(bins=20))plt.xlabel(\"High School Graduation Rate\")plt.ylabel(\"Poverty Rate\")plt.show()regplot seaborn.regplotsns.regplot(data=df_poverty_vs_hs, x=\"percent_completed_hs\", y=\"poverty_rate\")plt.xlabel(\"High School Graduation Rate\")plt.ylabel(\"Poverty Rate\")plt.show()kdeplot seaborn.kdeplotsns.kdeplot(data=df_fatalities, x=\"age\")plt.title(\"Age Distribution\")plt.xlabel(\"Age\")plt.show()FacetGrid seaborn.FacetGridraces = df_fatalities.race.value_counts().index# row: 每列圖表的資料分類根據# col: 每行圖表的資料分類根據figs = sns.FacetGrid(df_fatalities, row=\"race\", row_order=races, height=2, aspect=3)figs.map(sns.kdeplot, \"age\")plt.xlabel(\"Age\")plt.xlim(0,100)plt.show()畫出來的樣子:" }, { "title": "Homework: Space Mission Analysis", "url": "/posts/pandas-notes-1/", "categories": "Notes", "tags": "python, pandas, jupyter notebook, plotly", "date": "2022-09-27 13:02:00 +0000", "snippet": "紀錄100 Days of Code的作業: 分析Space Race時遇到的一些問題 (還有常常忘記的method…) 注意data type. 例如在分析像Price這種欄位時, 即使使用了pandas.Series.str等method做了處理, 還要記得轉成對應的numeric type. 不然無法做正確的sorting或是繪圖. 要複寫原來的df要加上inplace=TrueColumn relatedDrop columndf_status_dt_year.drop(['Date'], axis=1, inplace=True)Rename column有寫到column的才會改df_status_success_yr_count.rename(columns={'ISO': 'Success'}, inplace=True)Index relatedas_index=Falsegroup by後不要當作index, 使用as_index=Falsedf_status_dt = df_data.groupby(['Date','Mission_Status'], as_index=False).count()Reset indexdf_org_stat_yr.reset_index(level=[0,1], inplace=True)level=[0,1] 表示index 0和1, 以下圖例子來說就是Date和Organisation這兩個indexBefore reset index :After reset index :Plotly這個作業我只用了Plotly畫圖(真懶, 只想會一種 &gt;”&lt;)Precondtion:import plotly.express as px顯示圖片:fig.show()Line Plotly: Line Chartsfig = px.line( df_top_10_dt_year, x=df_top_10_dt_year.index.array, # x data來源column y='Location', # y data來源column color='Organisation', # 多個線條, 顏色的data來源column markers=True, # 是否顯示marker title='Number of Launches over Time by the Top 10 Organisations', # 圖表標題 labels= { # 標籤名稱設定 'Location': 'Number of Launches', 'x': 'Year' })fig.update_layout(xaxis=dict(range=[1957,2020])) # 設定x軸的上下限, y軸則是yaxisBar Plotly: Bar Chartsfig = px.bar( df_org, x=df_org.index.array, # x data來源column y='Organisation', # y data來源column title='Number of launches per Company', # 圖表標題 labels={ # 標籤名稱設定 'y': 'Launches', 'x': 'Organisation' })Pie Plotly: Pie Chartsfig = px.pie( df_r_status, values='Rocket_Status', # data來源column names=df_r_status.index.array, # 標籤名稱設定 title='Active versus Retired Rockets' # 圖表標題) hole = .3 # 可設定成甜甜圈圖Histogram Plotly: Histogramsfig = px.histogram( df_p['Price_N'], nbins=50, # bin number labels={ # 標籤名稱設定 'value': 'millions USD' })Choropleth Maps Plotly: Choropleth Maps Plotly: Built-in Continuous Color Scales in Pythonfig = px.choropleth( df_country_counts, locations='ISO', # 地圖位置data來源column color='Counts', # 顏色data來源column hover_name='Country', # 滑鼠移上去時顯示的名稱資料來源 color_continuous_scale=px.colors.sequential.matter, # 顏色組合 title='Number of Launches by Country', # 圖表標題 labels={ # 標籤名稱設定 'Counts': 'Number of Launches' })Sunburst Plotly: Sunburst Chartsfig = px.sunburst( df_mission_status, path=['ISO', 'Mission_Status'], # 圖表分佈的data來源columns(由中心向外) values='Mission_Status_Count' # 數值來源)" }, { "title": "Create Github Pages with Jekyll", "url": "/posts/create-github-pages-with-jekyll/", "categories": "Notes", "tags": "ruby, jekyll, github", "date": "2022-09-23 12:44:00 +0000", "snippet": "紀錄使用Jekyll建立Github網站的過程, 原本這一個網站是自己寫的陽春html… 而且是一頁式 XD參考的資料 Jekyll官方文件 Jekyll Theme Chirpy Demo 無痛轉移Medium到自架網站 How to Override CSS Style in JeykllSteps安裝RubyMac本身有default的版本, 但Jekyll建議使用chruby安裝另一個版本的Ruby, 沒有Homebrew的話先安裝HomebrewHomebrew安裝chruby並安裝(更新)Rubybrew install chruby ruby-installruby-install ruby設定Shell預設使用chruby (使用Bash則要更新.bash_profile)echo \"source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh\" &gt;&gt; ~/.zshrcecho \"source $(brew --prefix)/opt/chruby/share/chruby/auto.sh\" &gt;&gt; ~/.zshrcecho \"chruby ruby-3.1.2\" &gt;&gt; ~/.zshrc # run 'chruby' to see actual version檢查ruby版本是否為最新版本ruby -v安裝Jekyll和Bundlergem install jekyll bundler使用Chirpy使用Chirpy Starter建立新的repo, 並將repo名稱改成cloverwhale.github.ioclone remote repo: 我直接在VSCode中操作 click Source Control &gt; Clone Repository &gt; Clone from Github (需要授權)在project root direcotry底下, 執行bundle執行bundle lock — add-platform x86_64-linux這一行會在Gemfile.lock的PLATFORM底下, 加上x86_64-linux. 我不是很清楚為什麼要這麼做, 但是沒有這一行會無法在Github上deploy(我試著刪除這一行後push, Actions底下會看到錯誤)修改 _config.yml照著註解修改成自己要的資料, 我遇到一個問題是baseurl的設定.看著解釋以為要填上’/cloverwhale.github.io’, 但deploy到Github之後發現css的位置有問題(local是好的). 後來改成空白才有正確顯示# Change the following value to '/PROJECT_NAME' ONLY IF your site type is GitHub Pages Project sites# and doesn't have a custom domain.baseurl: ''預覽bundle exec jekyll s打開 http://127.0.0.1:4000/ 可顯示目前網站的樣子新增文章 在_post目錄下建立YYYY-MM-DD-TITLE.md的檔案 (檔案名稱要正確, 不然會無法顯示) 編輯md檔案, 開頭要include Front Matter ---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTT # +/-TTTT是timezone, 例如+0800categories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- Jekyll-Compose但是每一次要自己填有點麻煩, 所以另外安裝Jekyll-Compose把下面這一行加到Gemfile中gem 'jekyll-compose', group: [:jekyll_plugins]然後執行bundle之後就可以使用下面語法新增post(其他語法就看Jekyll-Compose說明)bundle exec jekyll post \"New Post Title\"然後要修改Front Matter話, 在_config.yml加上:jekyll_compose: default_front_matter: posts: description: image: category: tags: author: cloverwhale(因為我還沒想到我的usecase 所以先這樣…)還有一個自動開啟editor的功能, 等我弄懂再補上. (目前就是在VSCode中編輯對應的檔案)把local的東西丟到Github上就是git add, git commit, git push這樣. 要注意的是需要在Repository &gt; Settings底下把deploy的branch改成gh-pages然後看Actions裏面是否完成deployment即可.不是很重要但我就愛改顏色在assets底下新增css/style.scss編輯這個檔案, 先加上下面的語法, 在這之後就可以寫自己要的樣式了 (如果是其他的theme就要改成對應的名稱)------@import \"jekyll-theme-chirpy\";結語以上就是一個完全看不懂Ruby在幹嘛的人, 一直做Google search的成果…其他如何新增favicon等等就是Chirpy Demo網站都找的到.About頁面需要編輯_tabs底下的about.md檔案位置要放對." }, { "title": "Backup Links", "url": "/posts/backup_links/", "categories": "Python, Demo", "tags": "heroku, website", "date": "2022-09-22 22:43:00 +0000", "snippet": "原本有在Heroku上deploy一些作業的demo, 但可能11月底就沒了…Demo SitesTo be removed or migrated to other platform, Heroku will no longer be free by the end of November 2022. A website for adding/editing favorite cafes. A todo list web application. A Taiwan stock intraday order/volumes query application." } ]
